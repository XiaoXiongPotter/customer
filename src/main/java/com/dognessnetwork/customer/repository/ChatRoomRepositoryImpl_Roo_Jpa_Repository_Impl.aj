// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dognessnetwork.customer.repository;

import com.dognessnetwork.customer.domain.ChatRoom;
import com.dognessnetwork.customer.domain.QChatRoom;
import com.dognessnetwork.customer.repository.ChatRoomRepositoryCustom;
import com.dognessnetwork.customer.repository.ChatRoomRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ChatRoomRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ChatRoomRepositoryImpl implements ChatRoomRepositoryCustom;
    
    declare @type: ChatRoomRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ChatRoomRepositoryImpl.SEAT = "seat";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ChatRoomRepositoryImpl.PET_USER = "petUser";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ChatRoomRepositoryImpl.STATUS = "status";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ChatRoomRepositoryImpl.SEAT_AT = "seatAt";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ChatRoomRepositoryImpl.PET_USER_AT = "petUserAt";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ChatRoomRepositoryImpl.AVGRATE = "avgrate";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ChatRoom> ChatRoomRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QChatRoom chatRoom = QChatRoom.chatRoom;
        
        JPQLQuery<ChatRoom> query = from(chatRoom);
        
        Path<?>[] paths = new Path<?>[] {chatRoom.seat,chatRoom.petUser,chatRoom.status,chatRoom.seatAt,chatRoom.petUserAt,chatRoom.avgrate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SEAT, chatRoom.seat)
			.map(PET_USER, chatRoom.petUser)
			.map(STATUS, chatRoom.status)
			.map(SEAT_AT, chatRoom.seatAt)
			.map(PET_USER_AT, chatRoom.petUserAt)
			.map(AVGRATE, chatRoom.avgrate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, chatRoom);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ChatRoom> ChatRoomRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QChatRoom chatRoom = QChatRoom.chatRoom;
        
        JPQLQuery<ChatRoom> query = from(chatRoom);
        
        Path<?>[] paths = new Path<?>[] {chatRoom.seat,chatRoom.petUser,chatRoom.status,chatRoom.seatAt,chatRoom.petUserAt,chatRoom.avgrate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(chatRoom.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SEAT, chatRoom.seat)
			.map(PET_USER, chatRoom.petUser)
			.map(STATUS, chatRoom.status)
			.map(SEAT_AT, chatRoom.seatAt)
			.map(PET_USER_AT, chatRoom.petUserAt)
			.map(AVGRATE, chatRoom.avgrate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, chatRoom);
    }
    
}
