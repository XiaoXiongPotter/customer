// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dognessnetwork.customer.repository;

import com.dognessnetwork.customer.domain.Messages;
import com.dognessnetwork.customer.domain.QMessages;
import com.dognessnetwork.customer.repository.MessagesRepositoryCustom;
import com.dognessnetwork.customer.repository.MessagesRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MessagesRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: MessagesRepositoryImpl implements MessagesRepositoryCustom;
    
    declare @type: MessagesRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.POST_MESSAGES = "postMessages";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.SEND_TIME = "sendTime";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.FORM_USER = "formUser";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.TO_USER = "toUser";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.MESSAGE_TYPE = "messageType";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.MESSAGE_STATUS = "messageStatus";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.START_TIME = "startTime";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.PET_USER_NAME = "petUserName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MessagesRepositoryImpl.SEAT = "seat";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Messages> MessagesRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QMessages messages = QMessages.messages;
        
        JPQLQuery<Messages> query = from(messages);
        
        Path<?>[] paths = new Path<?>[] {messages.postMessages,messages.sendTime,messages.formUser,messages.toUser,messages.messageType,messages.messageStatus,messages.startTime,messages.petUserName,messages.seat};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(POST_MESSAGES, messages.postMessages)
			.map(SEND_TIME, messages.sendTime)
			.map(FORM_USER, messages.formUser)
			.map(TO_USER, messages.toUser)
			.map(MESSAGE_TYPE, messages.messageType)
			.map(MESSAGE_STATUS, messages.messageStatus)
			.map(START_TIME, messages.startTime)
			.map(PET_USER_NAME, messages.petUserName)
			.map(SEAT, messages.seat);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, messages);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Messages> MessagesRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QMessages messages = QMessages.messages;
        
        JPQLQuery<Messages> query = from(messages);
        
        Path<?>[] paths = new Path<?>[] {messages.postMessages,messages.sendTime,messages.formUser,messages.toUser,messages.messageType,messages.messageStatus,messages.startTime,messages.petUserName,messages.seat};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(messages.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(POST_MESSAGES, messages.postMessages)
			.map(SEND_TIME, messages.sendTime)
			.map(FORM_USER, messages.formUser)
			.map(TO_USER, messages.toUser)
			.map(MESSAGE_TYPE, messages.messageType)
			.map(MESSAGE_STATUS, messages.messageStatus)
			.map(START_TIME, messages.startTime)
			.map(PET_USER_NAME, messages.petUserName)
			.map(SEAT, messages.seat);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, messages);
    }
    
}
