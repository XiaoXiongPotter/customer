// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dognessnetwork.customer.repository;

import com.dognessnetwork.customer.domain.ChatRoom;
import com.dognessnetwork.customer.domain.Comment;
import com.dognessnetwork.customer.domain.QComment;
import com.dognessnetwork.customer.repository.CommentRepositoryCustom;
import com.dognessnetwork.customer.repository.CommentRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect CommentRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CommentRepositoryImpl implements CommentRepositoryCustom;
    
    declare @type: CommentRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CommentRepositoryImpl.CONTENT = "content";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CommentRepositoryImpl.FROM_PET_USER = "fromPetUser";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CommentRepositoryImpl.CHAT_ROOM = "chatRoom";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CommentRepositoryImpl.COMMENT_TIME = "commentTime";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CommentRepositoryImpl.STAR = "star";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Comment> CommentRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QComment comment = QComment.comment;
        
        JPQLQuery<Comment> query = from(comment);
        
        Path<?>[] paths = new Path<?>[] {comment.content,comment.fromPetUser,comment.chatRoom,comment.commentTime,comment.star};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CONTENT, comment.content)
			.map(FROM_PET_USER, comment.fromPetUser)
			.map(CHAT_ROOM, comment.chatRoom)
			.map(COMMENT_TIME, comment.commentTime)
			.map(STAR, comment.star);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, comment);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Comment> CommentRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QComment comment = QComment.comment;
        
        JPQLQuery<Comment> query = from(comment);
        
        Path<?>[] paths = new Path<?>[] {comment.content,comment.fromPetUser,comment.chatRoom,comment.commentTime,comment.star};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(comment.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CONTENT, comment.content)
			.map(FROM_PET_USER, comment.fromPetUser)
			.map(CHAT_ROOM, comment.chatRoom)
			.map(COMMENT_TIME, comment.commentTime)
			.map(STAR, comment.star);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, comment);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param chatRoom
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Comment> CommentRepositoryImpl.findByChatRoom(ChatRoom chatRoom, GlobalSearch globalSearch, Pageable pageable) {
        
        QComment comment = QComment.comment;
        
        JPQLQuery<Comment> query = from(comment);
        
        Assert.notNull(chatRoom, "chatRoom is required");
        
        query.where(comment.chatRoom.eq(chatRoom));
        Path<?>[] paths = new Path<?>[] {comment.content,comment.fromPetUser,comment.chatRoom,comment.commentTime,comment.star};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CONTENT, comment.content)
			.map(FROM_PET_USER, comment.fromPetUser)
			.map(CHAT_ROOM, comment.chatRoom)
			.map(COMMENT_TIME, comment.commentTime)
			.map(STAR, comment.star);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, comment);
    }
    
}
