// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dognessnetwork.customer.service.impl;

import com.dognessnetwork.customer.domain.ChatRoom;
import com.dognessnetwork.customer.domain.Comment;
import com.dognessnetwork.customer.domain.RoomStatus;
import com.dognessnetwork.customer.repository.ChatRoomRepository;
import com.dognessnetwork.customer.service.api.CommentService;
import com.dognessnetwork.customer.service.impl.ChatRoomServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ChatRoomServiceImpl_Roo_Service_Impl {
    
    declare @type: ChatRoomServiceImpl: @Service;
    
    declare @type: ChatRoomServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ChatRoomRepository ChatRoomServiceImpl.chatRoomRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CommentService ChatRoomServiceImpl.commentService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param chatRoomRepository
     * @param commentService
     */
    @Autowired
    public ChatRoomServiceImpl.new(ChatRoomRepository chatRoomRepository, @Lazy CommentService commentService) {
        setChatRoomRepository(chatRoomRepository);
        setCommentService(commentService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ChatRoomRepository
     */
    public ChatRoomRepository ChatRoomServiceImpl.getChatRoomRepository() {
        return chatRoomRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param chatRoomRepository
     */
    public void ChatRoomServiceImpl.setChatRoomRepository(ChatRoomRepository chatRoomRepository) {
        this.chatRoomRepository = chatRoomRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CommentService
     */
    public CommentService ChatRoomServiceImpl.getCommentService() {
        return commentService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param commentService
     */
    public void ChatRoomServiceImpl.setCommentService(CommentService commentService) {
        this.commentService = commentService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param chatRoom
     * @param commentToAdd
     * @return ChatRoom
     */
    @Transactional
    public ChatRoom ChatRoomServiceImpl.addToComment(ChatRoom chatRoom, Iterable<Long> commentToAdd) {
        List<Comment> comment = getCommentService().findAll(commentToAdd);
        chatRoom.addToComment(comment);
        return getChatRoomRepository().save(chatRoom);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param chatRoom
     * @param commentToRemove
     * @return ChatRoom
     */
    @Transactional
    public ChatRoom ChatRoomServiceImpl.removeFromComment(ChatRoom chatRoom, Iterable<Long> commentToRemove) {
        List<Comment> comment = getCommentService().findAll(commentToRemove);
        chatRoom.removeFromComment(comment);
        return getChatRoomRepository().save(chatRoom);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param chatRoom
     * @param comment
     * @return ChatRoom
     */
    @Transactional
    public ChatRoom ChatRoomServiceImpl.setComment(ChatRoom chatRoom, Iterable<Long> comment) {
        List<Comment> items = getCommentService().findAll(comment);
        Set<Comment> currents = chatRoom.getComment();
        Set<Comment> toRemove = new HashSet<Comment>();
        for (Iterator<Comment> iterator = currents.iterator(); iterator.hasNext();) {
            Comment nextComment = iterator.next();
            if (items.contains(nextComment)) {
                items.remove(nextComment);
            } else {
                toRemove.add(nextComment);
            }
        }
        chatRoom.removeFromComment(toRemove);
        chatRoom.addToComment(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        chatRoom.setVersion(chatRoom.getVersion() + 1);
        return getChatRoomRepository().save(chatRoom);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param chatRoom
     */
    @Transactional
    public void ChatRoomServiceImpl.delete(ChatRoom chatRoom) {
        // Clear bidirectional one-to-many parent relationship with Comment
        for (Comment item : chatRoom.getComment()) {
            item.setChatRoom(null);
        }
        
        getChatRoomRepository().delete(chatRoom);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<ChatRoom> ChatRoomServiceImpl.save(Iterable<ChatRoom> entities) {
        return getChatRoomRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ChatRoomServiceImpl.delete(Iterable<Long> ids) {
        List<ChatRoom> toDelete = getChatRoomRepository().findAll(ids);
        getChatRoomRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return ChatRoom
     */
    @Transactional
    public ChatRoom ChatRoomServiceImpl.save(ChatRoom entity) {
        return getChatRoomRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ChatRoom
     */
    public ChatRoom ChatRoomServiceImpl.findOne(Long id) {
        return getChatRoomRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ChatRoom
     */
    public ChatRoom ChatRoomServiceImpl.findOneForUpdate(Long id) {
        return getChatRoomRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<ChatRoom> ChatRoomServiceImpl.findAll(Iterable<Long> ids) {
        return getChatRoomRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<ChatRoom> ChatRoomServiceImpl.findAll() {
        return getChatRoomRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ChatRoomServiceImpl.count() {
        return getChatRoomRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ChatRoom> ChatRoomServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getChatRoomRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ChatRoom> ChatRoomServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getChatRoomRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param seat
     * @param pageable
     * @return Page
     */
    public Page<ChatRoom> ChatRoomServiceImpl.findBySeat(String seat, Pageable pageable) {
        return getChatRoomRepository().findBySeat(seat, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param seat
     * @param petUser
     * @param status
     * @param pageable
     * @return Page
     */
    public Page<ChatRoom> ChatRoomServiceImpl.findBySeatAndPetUserAndStatus(String seat, String petUser, RoomStatus status, Pageable pageable) {
        return getChatRoomRepository().findBySeatAndPetUserAndStatus(seat, petUser, status, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param seat
     * @return Long
     */
    public long ChatRoomServiceImpl.countBySeat(String seat) {
        return getChatRoomRepository().countBySeat(seat);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param seat
     * @param petUser
     * @param status
     * @return Long
     */
    public long ChatRoomServiceImpl.countBySeatAndPetUserAndStatus(String seat, String petUser, RoomStatus status) {
        return getChatRoomRepository().countBySeatAndPetUserAndStatus(seat, petUser, status);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<ChatRoom> ChatRoomServiceImpl.getEntityType() {
        return ChatRoom.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ChatRoomServiceImpl.getIdType() {
        return Long.class;
    }
    
}
